service: notes-api
frameworkVersion: "3"

plugins:
  # - serverless-dynamodb-local
  # - serverless-offline
  - serverless-iam-roles-per-function
  - serverless-plugin-typescript

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
      

functions:
  authorizer:
    handler: authorizer.handler
    environment:
      COGNITO_USERPOOL_ID: !Ref cognitoUserPool
      COGNITO_WEB_CLIENT_ID: !Ref cognitoUserPoolWebClient
    

  createNote:
    handler: handler.createNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - dynamodb:PutItem        
        Resource: !GetAtt notesTable.Arn
    events:
      - http:
          method: post
          path: notes
          authorizer: authorizer

  updateNote:
    handler: handler.updateNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - dynamodb:UpdateItem        
        Resource: !GetAtt notesTable.Arn
    events:
      - http:
          method: put
          path: notes/{id}
          authorizer: authorizer

  deleteNote:
    handler: handler.deleteNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: "Allow"       
        Action:
          - dynamodb:DeleteItem       
        Resource: !GetAtt cognitoUserPool.Arn
    events:
      - http:
          method: delete
          path: notes/{id}
          authorizer: authorizer
  
  getAllNotes:
    handler: handler.getAllNotes
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: "Allow"       
        Action:
          - dynamodb:Scan       
        Resource: !GetAtt notesTable.Arn
    events:
      - http:
          method: get
          path: notes
          authorizer: 
            name: userpool_authorizer
            type: COGNITO_USER_POOLS
            # arn: ${ssm:/notes/${self:provider.stage}/userPoolArn}
            arn: !GetAtt cognitoUserPool.Arn

resources:
  Resources:
    ${file(resources.yml)}
